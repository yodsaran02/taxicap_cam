from path_algo import *
# Example graph represented as an adjacency dictionary
graph = {
    'A': {'B': 1, 'C': 4},
    'B': {'A': 1, 'C': 2, 'D': 5},
    'C': {'A': 4, 'B': 2, 'D': 1},
    'D': {'B': 5, 'C': 1}
}
graph2 = {
    0: {1: 33, 25: 48},
    1: {0: 33, 26: 48, 2: 43},
    2: {1: 43, 3: 24, 5: 25},
    3: {2: 24, 4: 24, 6: 25},
    4: {24: 24, 7: 35, 22: 48, 26: 43},
    5: {2: 25, 6: 24, 8: 9},
    6: {5: 24, 3: 25, 7: 24},
    7: {6: 24, 4: 29, 9: 9},
    8: {5: 9, 9: 48, 11: 20},
    9: {7: 9, 8: 48, 10: 22, 21:76},
    10: {9: 22, 12: 24, 15: 13, 17:48},
    11: {8: 20, 12: 24, 13: 33},
    12: {11: 24, 10: 24, 14: 33},
    13: {11: 33, 14: 24},
    14: {13: 24, 12: 33, 15: 24},
    15: {14: 24, 10: 33, 16: 48},
    16: {15: 48, 17:33, 20: 48},
    17: {10: 48, 18: 24, 16: 33},
    18: {17: 24, 21: 22, 19: 24},
    19: {18: 24, 40: 48, 20: 33},
    20: {16: 48, 19: 33, 42: 48},
    21: {9: 76, 38: 76, 18: 22},
    22: {4: 48, 33: 48, 23: 43},
    23: {26: 48, 24: 33, 32: 24, 22: 43},
    24: {25: 48, 23: 33, 27: 24},
    25: {0: 48, 26: 33, 24: 48},
    26: {1: 48, 25: 33, 23: 48, 4: 43},
    27: {24: 24, 30: 24, 32: 33},
    28: {30: 48, 35: 48, 29: 33},
    29: {28: 33, 36: 48, 31: 48, 45: 22},
    30: {27: 24, 28: 48, 31: 33},
    31: {30: 33, 32: 24, 29: 48, 44: 22},
    32: {27: 33, 31: 24, 23: 24},
    33: {44: 22, 22: 48, 34: 48},
    34: {33: 48, 45: 22, 37: 48},
    35: {28: 48, 36: 33},
    36: {35: 33, 29: 48, 37: 43},
    37: {36: 43, 34: 48, 39: 34},
    38: {34: 34, 39: 48, 21: 76, 40: 22},
    39: {37: 34, 38: 48, 41: 22},
    40: {38: 22, 19: 48, 42: 33, 41: 48},
    41: {39: 22, 40: 18, 43: 32},
    42: {40: 33, 43: 48, 20: 48},
    43: {42: 48, 41: 32},
    44: {31: 22, 45: 48, 33: 22},
    45: {29: 22, 34: 22, 44: 48}


    
    

    
    
}
graph3 = {
    0: {1: 33, 25: 48},
    1: {0: 33, 26: 48},
    25: {0: 48, 26: 33},
    
}
graph4 = {1:{2:12,20:11,15:48,16:34}, 2:{1:12,3:8}, 3:{2:8,12:24,4:12}, 4:{3:12,14:15,5:5}, 5:{4:5,10:27,6:15}, 6:{5:15,13:15,9:24,7:11}, 7:{6:11,8:24}, 8:{7:24,9:10}, 9:{8:10,10:13,6:24,17:17}, 10:{11:12,9:13,18:14,5:27}, 11:{10:12,17:14,12:8}, 12:{11:8,16:11,3:24}, 13:{6:15,14:20}, 14:{13:20,4:15,20:27}, 15:{16:17,1:48,20:53}, 16:{15:17,1:34,12:10,20:43}, 17:{11:14}, 18:{10:14}, 19:{9:17}, 20:{1:11,15:53,16:43,14:27} }

for i in range(20):
    for j in range (14):
        start_node = i
        end_node = j
        shortest_distance, shortest_path = dijkstra(graph2, start_node, end_node)
        print("Shortest distance from node", start_node, "to node", end_node, ":", shortest_distance)
        print("Shortest path:", shortest_path)